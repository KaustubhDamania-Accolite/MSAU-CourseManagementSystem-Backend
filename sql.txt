CREATE TABLE user (
   user_id int AUTO_INCREMENT,
   first_name VARCHAR(50),
   email VARCHAR(45),
   date_of_joining date,
   PRIMARY KEY(user_id)
);

CREATE TABLE course(
course_id int auto_increment,
course_name VARCHAR(80),
course_description VARCHAR(500),
prerequisite VARCHAR(100),
created_on date,
last_modified date,
user_id int,
PRIMARY KEY(course_id),
FOREIGN KEY(user_id) REFERENCES user(user_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION
);

CREATE TABLE `coursemanagement`.`skills` (
  `skill_id` INT NOT NULL AUTO_INCREMENT,
  `course_id` INT NULL,
  `skill_name` VARCHAR(45) NULL,
  PRIMARY KEY (`skill_id`),
  INDEX `course_id_idx` (`course_id` ASC) VISIBLE,
  CONSTRAINT `course_id`
    FOREIGN KEY (`course_id`)
    REFERENCES `coursemanagement`.`course` (`course_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

CREATE TABLE trainingmaterial (
    material_id int AUTO_INCREMENT,
    course_id INT,
    parent_id INT default 0,
    isCurrent boolean default true,
    file_name varchar(255),
    file_type varchar(255),
    file_data longblob,
    created_on date,
    last_modified date,
    PRIMARY KEY (material_id),
    FOREIGN KEY (course_id) REFERENCES course(course_id)
	ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

CREATE TABLE feedback (
    feedback_id int AUTO_INCREMENT,
    course_id INT,
    participant_name varchar(255),
    feedback_text varchar(255),
    created_on date,
    rating INT,
    PRIMARY KEY (feedback_id),
    FOREIGN KEY (course_id) REFERENCES course(course_id)
	ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

